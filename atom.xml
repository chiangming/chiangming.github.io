<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Matt&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://chiangming.github.io/"/>
  <updated>2020-03-03T09:11:01.574Z</updated>
  <id>https://chiangming.github.io/</id>
  
  <author>
    <name>Matt</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>掘金/promise</title>
    <link href="https://chiangming.github.io/2020/03/03/%E6%8E%98%E9%87%91/promise/"/>
    <id>https://chiangming.github.io/2020/03/03/%E6%8E%98%E9%87%91/promise/</id>
    <published>2020-03-03T09:00:37.788Z</published>
    <updated>2020-03-03T09:11:01.574Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span
        
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>掘金/整理1</title>
    <link href="https://chiangming.github.io/2020/03/03/%E6%8E%98%E9%87%91/%E6%95%B4%E7%90%861/"/>
    <id>https://chiangming.github.io/2020/03/03/%E6%8E%98%E9%87%91/%E6%95%B4%E7%90%861/</id>
    <published>2020-03-03T01:32:50.155Z</published>
    <updated>2020-03-04T15:29:27.071Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JS-基础知识点&quot;&gt;&lt;a href=&quot;#JS-基础知识点&quot; class=&quot;headerlink&quot; title=&quot;JS 基础知识点&quot;&gt;&lt;/a&gt;JS 基础知识点&lt;/h1&gt;&lt;h2 id=&quot;原始类型&quot;&gt;&lt;a href=&quot;#原始类型&quot; class=&quot;headerlink&quot; title=&quot;原始类型&quot;&gt;&lt;/a&gt;原始类型&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;原始类型有哪几种？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;boolean null  undefined number  string  symbol bigint&lt;/li&gt;
&lt;li&gt;undefined.toString() -&amp;gt; TypeError&lt;ul&gt;
&lt;li&gt;原始类型存储的都是值，是没有函数可以调用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;‘1’.toString() -&amp;gt; ‘1’&lt;ul&gt;
&lt;li&gt;强制类型转换&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;number是浮点类型的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0.1 + 0.2 !== 0.3&lt;/li&gt;
&lt;li&gt;使用 Math.abs(a-b) &amp;lt; Number.EPSILON&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;null 是对象嘛？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不是 typeof null -&amp;gt; object&lt;/li&gt;
&lt;li&gt;js 32位系统000 开头代表是对象，然而 null 表示为全零
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>阮一峰/400</title>
    <link href="https://chiangming.github.io/2020/02/25/%E9%98%AE%E4%B8%80%E5%B3%B0/400/"/>
    <id>https://chiangming.github.io/2020/02/25/%E9%98%AE%E4%B8%80%E5%B3%B0/400/</id>
    <published>2020-02-25T01:55:54.561Z</published>
    <updated>2020-02-25T01:57:43.656Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;node如何和MySQL进行通信&quot;&gt;&lt;a href=&quot;#node如何和MySQL进行通信&quot; class=&quot;headerlink&quot; title=&quot;node如何和MySQL进行通信&quot;&gt;&lt;/a&gt;node如何和MySQL进行通信&lt;/h2&gt;&lt;p&gt;var mysql  =
        
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>interview/面试</title>
    <link href="https://chiangming.github.io/2020/02/24/interview/%E9%9D%A2%E8%AF%95/"/>
    <id>https://chiangming.github.io/2020/02/24/interview/%E9%9D%A2%E8%AF%95/</id>
    <published>2020-02-24T00:04:11.241Z</published>
    <updated>2020-02-24T00:56:02.989Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;js的bind、apply、call有什么区别&quot;&gt;&lt;a href=&quot;#js的bind、apply、call有什么区别&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Vue题目</title>
    <link href="https://chiangming.github.io/2020/02/23/interview/vue/"/>
    <id>https://chiangming.github.io/2020/02/23/interview/vue/</id>
    <published>2020-02-22T16:15:39.000Z</published>
    <updated>2020-02-25T02:55:23.631Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;写-Vue-项目时为什么要在列表组件中写-key，其作用是什么？&quot;&gt;&lt;a href=&quot;#写-Vue-项目时为什么要在列表组件中写-key，其作用是什么？&quot; class=&quot;headerlink&quot; title=&quot;写 Vue 项目时为什么要在列表组件中写 key，其作用是什么？&quot;&gt;&lt;/a&gt;写 Vue 项目时为什么要在列表组件中写 key，其作用是什么？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;考虑到DOM节点更改的性能问题，Vue使用vnode做虚拟dom节点进行更新&lt;/li&gt;
&lt;li&gt;组件的更新，是通过每一个vue实例的watcher派发更新的，每一步更新都是更新一个vue实例对应的dom。因为update事件被推送到任务队列时，是按watcher的id从小到大进行排序，所以会先更新用户watcher，再更新父watcher，再更新子watcher&lt;/li&gt;
&lt;li&gt;响应式数据的变化触发渲染watcher的updateComponment方法，执行vm._patch(vm._render,false)过程&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;_render() 生成当前vm实例 新的vnode&lt;/li&gt;
&lt;li&gt;_update() 执行 patch方法，由于此时存在旧vnode，如果新旧vnode不同（key tag），会调用 patchVnode，如果是不同的vnode，createELm 创建新的dom，并删去旧的dom&lt;/li&gt;
&lt;li&gt;patchVnode 主要是进行更新dom操作 &lt;ul&gt;
&lt;li&gt;新旧节点的孩子节点存在 且不同，调用diff算法&lt;/li&gt;
&lt;li&gt;比较 新旧节点的文本，进行更新&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;diff算法
    
    </summary>
    
    
      <category term="面试" scheme="https://chiangming.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="面试题" scheme="https://chiangming.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
      <category term="Vue" scheme="https://chiangming.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>interview/vue-blog</title>
    <link href="https://chiangming.github.io/2020/02/20/interview/vue-blog/"/>
    <id>https://chiangming.github.io/2020/02/20/interview/vue-blog/</id>
    <published>2020-02-20T02:11:00.675Z</published>
    <updated>2020-02-21T04:53:15.406Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;响应式系统&quot;&gt;&lt;a href=&quot;#响应式系统&quot; class=&quot;headerlink&quot; title=&quot;响应式系统&quot;&gt;&lt;/a&gt;响应式系统&lt;/h1&gt;&lt;p&gt;1、Vue
        
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>interview/js加载图片</title>
    <link href="https://chiangming.github.io/2020/02/19/interview/js%E5%8A%A0%E8%BD%BD%E5%9B%BE%E7%89%87/"/>
    <id>https://chiangming.github.io/2020/02/19/interview/js%E5%8A%A0%E8%BD%BD%E5%9B%BE%E7%89%87/</id>
    <published>2020-02-19T13:32:33.080Z</published>
    <updated>2020-02-22T11:10:16.833Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;!DOCTYPE html&gt;

&lt;html lang=&quot;en&quot;&gt;

&lt;head&gt;
  &lt;meta charset=&quot;UTF-8&quot;&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,
        
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>javascript知识点</title>
    <link href="https://chiangming.github.io/2020/02/17/interview/javascript%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>https://chiangming.github.io/2020/02/17/interview/javascript%E7%9F%A5%E8%AF%86%E7%82%B9/</id>
    <published>2020-02-16T16:15:39.000Z</published>
    <updated>2020-02-18T06:59:00.536Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JS知识点&quot;&gt;&lt;a href=&quot;#JS知识点&quot; class=&quot;headerlink&quot; title=&quot;JS知识点&quot;&gt;&lt;/a&gt;JS知识点&lt;/h1&gt;&lt;h2 id=&quot;this绑定&quot;&gt;&lt;a href=&quot;#this绑定&quot; class=&quot;headerlink&quot; title=&quot;this绑定&quot;&gt;&lt;/a&gt;this绑定&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;直接调用，立即执行 -&amp;gt; window|gloable&lt;/li&gt;
&lt;li&gt;obj.foo() -&amp;gt; obj&lt;/li&gt;
&lt;li&gt;new Foo() -&amp;gt; foo&lt;/li&gt;
&lt;li&gt;箭头函数 -&amp;gt; 没有this、arguments、prototype&lt;/li&gt;
&lt;li&gt;bind({a:100}) -&amp;gt; {a:100} 第一个bind &lt;/li&gt;
&lt;li&gt;bind() -&amp;gt; window|gloable&lt;/li&gt;
&lt;li&gt;new &amp;gt; bind &amp;gt; 对象调用 &amp;gt; 直接调用
    
    </summary>
    
    
      <category term="面试" scheme="https://chiangming.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="javascript" scheme="https://chiangming.github.io/tags/javascript/"/>
    
      <category term="面试题" scheme="https://chiangming.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>源码模拟</title>
    <link href="https://chiangming.github.io/2020/02/17/interview/%E6%89%8B%E5%86%99%E4%BB%A3%E7%A0%81/"/>
    <id>https://chiangming.github.io/2020/02/17/interview/%E6%89%8B%E5%86%99%E4%BB%A3%E7%A0%81/</id>
    <published>2020-02-16T16:15:39.000Z</published>
    <updated>2020-02-19T15:22:40.278Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;call&quot;&gt;&lt;a href=&quot;#call&quot; class=&quot;headerlink&quot; title=&quot;call&quot;&gt;&lt;/a&gt;call&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;思想: fn.call(obj,…args)转换成obj.fn(…args)&lt;figure
        
      
    
    </summary>
    
    
      <category term="面试" scheme="https://chiangming.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="javascript" scheme="https://chiangming.github.io/tags/javascript/"/>
    
      <category term="面试题" scheme="https://chiangming.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>阮一峰的网络日志</title>
    <link href="https://chiangming.github.io/2020/02/17/%E9%98%AE%E4%B8%80%E5%B3%B0/1/"/>
    <id>https://chiangming.github.io/2020/02/17/%E9%98%AE%E4%B8%80%E5%B3%B0/1/</id>
    <published>2020-02-16T16:15:39.000Z</published>
    <updated>2020-02-19T14:45:42.505Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;Javascript获取页面元素的位置&quot;&gt;&lt;a href=&quot;#Javascript获取页面元素的位置&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
    
      <category term="阮一峰" scheme="https://chiangming.github.io/categories/%E9%98%AE%E4%B8%80%E5%B3%B0/"/>
    
    
      <category term="阮一峰" scheme="https://chiangming.github.io/tags/%E9%98%AE%E4%B8%80%E5%B3%B0/"/>
    
  </entry>
  
  <entry>
    <title>排序</title>
    <link href="https://chiangming.github.io/2020/02/17/%E6%8E%92%E5%BA%8F/"/>
    <id>https://chiangming.github.io/2020/02/17/%E6%8E%92%E5%BA%8F/</id>
    <published>2020-02-16T16:15:39.000Z</published>
    <updated>2020-02-18T04:02:27.706Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;参考 &lt;a href=&quot;https://www.cnblogs.com/onepixel/articles/7674659.html&quot; target=&quot;_blank&quot;
        
      
    
    </summary>
    
    
      <category term="算法" scheme="https://chiangming.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="javascript" scheme="https://chiangming.github.io/tags/javascript/"/>
    
      <category term="算法" scheme="https://chiangming.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>ES6</title>
    <link href="https://chiangming.github.io/2020/02/16/es6%E7%9B%B8%E5%85%B3/"/>
    <id>https://chiangming.github.io/2020/02/16/es6%E7%9B%B8%E5%85%B3/</id>
    <published>2020-02-15T16:15:25.000Z</published>
    <updated>2020-02-19T11:59:11.479Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;let-和const&quot;&gt;&lt;a href=&quot;#let-和const&quot; class=&quot;headerlink&quot; title=&quot;let 和const&quot;&gt;&lt;/a&gt;let 和const&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;不允许重复声明&lt;/li&gt;
&lt;li&gt;不存在变量提升
        
      
    
    </summary>
    
    
      <category term="javascript" scheme="https://chiangming.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="https://chiangming.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>防抖</title>
    <link href="https://chiangming.github.io/2020/02/10/%E9%98%B2%E6%8A%96/"/>
    <id>https://chiangming.github.io/2020/02/10/%E9%98%B2%E6%8A%96/</id>
    <published>2020-02-10T06:06:27.952Z</published>
    <updated>2020-02-10T14:03:13.101Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;!DOCTYPE html&gt;
&lt;html&gt;

&lt;head&gt;
  &lt;meta charset=&#39;utf-8&#39;&gt;
  &lt;meta http-equiv=&#39;X-UA-Compatible&#39; content=&#39;IE=edge&#39;&gt;
  &lt;title&gt;Page
        
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>vue整理</title>
    <link href="https://chiangming.github.io/2019/12/22/vue%E6%BA%90%E7%A0%81/vue/"/>
    <id>https://chiangming.github.io/2019/12/22/vue%E6%BA%90%E7%A0%81/vue/</id>
    <published>2019-12-21T16:15:39.000Z</published>
    <updated>2020-02-10T08:29:43.584Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;vuex&quot;&gt;&lt;a href=&quot;#vuex&quot; class=&quot;headerlink&quot; title=&quot;vuex&quot;&gt;&lt;/a&gt;vuex&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/23921964&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/23921964&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;响应式原理&quot;&gt;&lt;a href=&quot;#响应式原理&quot; class=&quot;headerlink&quot; title=&quot;响应式原理&quot;&gt;&lt;/a&gt;响应式原理&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://103.14.34.148:9000/imgs/blog/img/reactive.png&quot; alt=&quot;reactive&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Vue的初始化阶段，对vue的属性进行处理对于data和props,Vue会通过ovserve/defineReactive等系列操作，把整个data和props定义的对象每一个属性编成响应式的，同时内部持有一个dep的实例。&lt;/li&gt;
&lt;li&gt;当我们访问到响应式数据的时候，就会触发数据内部dep的depend方法来收集依赖&lt;/li&gt;
&lt;li&gt;收集依赖收集的是当前正在计算的watcher，也就是说当前的Dep.target就会作为订阅者来订阅这些数据的变化
    
    </summary>
    
    
      <category term="Vue" scheme="https://chiangming.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://chiangming.github.io/tags/Vue/"/>
    
      <category term="源码解析" scheme="https://chiangming.github.io/tags/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>vue-router</title>
    <link href="https://chiangming.github.io/2019/12/22/vue%E6%BA%90%E7%A0%81/vue-router/"/>
    <id>https://chiangming.github.io/2019/12/22/vue%E6%BA%90%E7%A0%81/vue-router/</id>
    <published>2019-12-21T16:15:38.000Z</published>
    <updated>2020-02-10T08:30:34.643Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;注册&quot;&gt;&lt;a href=&quot;#注册&quot; class=&quot;headerlink&quot; title=&quot;注册&quot;&gt;&lt;/a&gt;注册&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;install&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;Vue&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;comment&quot;&gt;// 混入 beforeCreate 钩子&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     Vue.mixin(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       beforeCreate () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;comment&quot;&gt;// 在option上面存在router则代表是根组件 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (isDef(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.$options.router)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._routerRoot = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;// 定义router的根vm&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._router = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.$options.router&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;comment&quot;&gt;// 执行_router实例的 init 方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._router.init(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;comment&quot;&gt;// 为 vue 实例定义数据劫持&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           Vue.util.defineReactive(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;_route&#39;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._router.history.current)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;comment&quot;&gt;// 非根组件则直接从父组件中获取&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._routerRoot = (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.$parent &amp;amp;&amp;amp; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.$parent._routerRoot) || &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         registerInstance(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       destroyed () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         registerInstance(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;comment&quot;&gt;// 设置代理，当访问 this.$router 的时候，代理到 this._routerRoot._router&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.defineProperty(Vue.prototype, &lt;span class=&quot;string&quot;&gt;&#39;$router&#39;&lt;/span&gt;, &amp;#123;&lt;span class=&quot;comment&quot;&gt;//Router&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt; () &amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._routerRoot._router &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;comment&quot;&gt;// 设置代理，当访问 this.$route 的时候，代理到 this._routerRoot._route&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.defineProperty(Vue.prototype, &lt;span class=&quot;string&quot;&gt;&#39;$route&#39;&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt; () &amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._routerRoot._route &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;comment&quot;&gt;// 注册 router-view 和 router-link 组件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     Vue.component(&lt;span class=&quot;string&quot;&gt;&#39;RouterView&#39;&lt;/span&gt;, View)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     Vue.component(&lt;span class=&quot;string&quot;&gt;&#39;RouterLink&#39;&lt;/span&gt;, Link)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;comment&quot;&gt;// Vue钩子合并策略&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; strats = Vue.config.optionMergeStrategies&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;comment&quot;&gt;// use the same hook merging strategy for route hooks&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     strats.beforeRouteEnter = strats.beforeRouteLeave = strats.beforeRouteUpdate = strats.created&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Vue" scheme="https://chiangming.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://chiangming.github.io/tags/Vue/"/>
    
      <category term="源码解析" scheme="https://chiangming.github.io/tags/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>12.transition</title>
    <link href="https://chiangming.github.io/2019/12/22/vue%E6%BA%90%E7%A0%81/12.transition/"/>
    <id>https://chiangming.github.io/2019/12/22/vue%E6%BA%90%E7%A0%81/12.transition/</id>
    <published>2019-12-21T16:15:37.000Z</published>
    <updated>2020-02-10T08:33:27.425Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;render函数-vnode&quot;&gt;&lt;a href=&quot;#render函数-vnode&quot; class=&quot;headerlink&quot; title=&quot;render函数 vnode&quot;&gt;&lt;/a&gt;render函数 vnode&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;transition组件使用同插槽一样，调用 transition 组件的render方法，通过 &lt;code&gt;this.$slots.default&lt;/code&gt; 取得内部的vnode&lt;/li&gt;
&lt;li&gt;在 vnode的data上 生成 transition对象，保存transition标签上的 props （例如 name），listeners等属性 &lt;code&gt;vnode.data.transition&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; data: &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt; = (child.data || (child.data = &amp;#123;&amp;#125;)).transition = extractTransitionData(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 取出 transition组件 过渡动画所需的属性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;   (&lt;span class=&quot;params&quot;&gt;comp: Component&lt;/span&gt;): &lt;span class=&quot;title&quot;&gt;Object&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; data = &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; options: ComponentOptions = comp.$options&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// props&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; key &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; options.propsData) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    data[key] = comp[key]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// events.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// extract listeners and pass them directly to the transition methods&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; listeners: ?&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt; = options._parentListeners&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; key &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; listeners) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    data[camelize(key)] = listeners[key]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过该方法在子组件上添加动画css名，这样 child.data.transition 中就包含了过渡所需的一些数据&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果组件里面写了html语言（不是正常插槽的写法），那么会作为 _c的 children vnode 传入，最终vnode保存在 componentOptions.children，在 _init过程中 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;合并component配置的过程中，&lt;code&gt;opts._renderChildren = vnodeComponentOptions.children;&lt;/code&gt;，&lt;/li&gt;
&lt;li&gt;initRender 将 opts._renderChildren 挂载到 vm.$slots.default 上
    
    </summary>
    
    
      <category term="Vue" scheme="https://chiangming.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://chiangming.github.io/tags/Vue/"/>
    
      <category term="源码解析" scheme="https://chiangming.github.io/tags/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>11.keep-alive</title>
    <link href="https://chiangming.github.io/2019/12/22/vue%E6%BA%90%E7%A0%81/11.keep-alive/"/>
    <id>https://chiangming.github.io/2019/12/22/vue%E6%BA%90%E7%A0%81/11.keep-alive/</id>
    <published>2019-12-21T16:15:36.000Z</published>
    <updated>2020-02-10T08:36:01.745Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;keep-alive组件是一个抽象组件，它的实现通过自定义render函数并且利用了插槽，并且知道了 keep-alive 缓存 vnode，了解组件包裹的子元素——也就是插槽是如何做更新的。且在 patch 过程中对于已缓存的组件不会执行 mounted，所以不会有一般的组件的生命周期函数但是又提供了activated 和 deactivated 钩子函数。另外我们还知道了keep-alive的 props 除了 include 和 exclude 还有文档中没有提到的 max，它能控制我们缓存的个数。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Vue" scheme="https://chiangming.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://chiangming.github.io/tags/Vue/"/>
    
      <category term="源码解析" scheme="https://chiangming.github.io/tags/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>10.插槽</title>
    <link href="https://chiangming.github.io/2019/12/22/vue%E6%BA%90%E7%A0%81/10.%E6%8F%92%E6%A7%BD/"/>
    <id>https://chiangming.github.io/2019/12/22/vue%E6%BA%90%E7%A0%81/10.%E6%8F%92%E6%A7%BD/</id>
    <published>2019-12-21T16:15:35.000Z</published>
    <updated>2020-02-10T08:32:50.722Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;编译&quot;&gt;&lt;a href=&quot;#编译&quot; class=&quot;headerlink&quot; title=&quot;编译&quot;&gt;&lt;/a&gt;编译&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;./demo/slot.html&quot;&gt;demo&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Vue" scheme="https://chiangming.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://chiangming.github.io/tags/Vue/"/>
    
      <category term="源码解析" scheme="https://chiangming.github.io/tags/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>9.双向绑定</title>
    <link href="https://chiangming.github.io/2019/12/22/vue%E6%BA%90%E7%A0%81/9.%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9Av-model/"/>
    <id>https://chiangming.github.io/2019/12/22/vue%E6%BA%90%E7%A0%81/9.%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9Av-model/</id>
    <published>2019-12-21T16:15:34.000Z</published>
    <updated>2020-02-10T08:32:50.134Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;补充表单知识点&quot;&gt;&lt;a href=&quot;#补充表单知识点&quot; class=&quot;headerlink&quot; title=&quot;补充表单知识点&quot;&gt;&lt;/a&gt;补充表单知识点&lt;/h2&gt;&lt;h4 id=&quot;表单&quot;&gt;&lt;a href=&quot;#表单&quot; class=&quot;headerlink&quot; title=&quot;表单&quot;&gt;&lt;/a&gt;表单&lt;/h4&gt;&lt;p&gt;input&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;text 单行文本&lt;ul&gt;
&lt;li&gt;placeholder 默认文本&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;radio 单选框&lt;ul&gt;
&lt;li&gt;value&lt;/li&gt;
&lt;li&gt;name  单选框组名字相同&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;checkbox 复选框&lt;ul&gt;
&lt;li&gt;value 提交的值 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;textarea 多行文本&lt;/p&gt;
    
    </summary>
    
    
      <category term="Vue" scheme="https://chiangming.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://chiangming.github.io/tags/Vue/"/>
    
      <category term="源码解析" scheme="https://chiangming.github.io/tags/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>8.事件绑定</title>
    <link href="https://chiangming.github.io/2019/12/22/vue%E6%BA%90%E7%A0%81/8.event/"/>
    <id>https://chiangming.github.io/2019/12/22/vue%E6%BA%90%E7%A0%81/8.event/</id>
    <published>2019-12-21T16:15:33.000Z</published>
    <updated>2020-02-10T08:32:49.550Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;编译&quot;&gt;&lt;a href=&quot;#编译&quot; class=&quot;headerlink&quot; title=&quot;编译&quot;&gt;&lt;/a&gt;编译&lt;/h2&gt;&lt;h4 id=&quot;生成-ast树&quot;&gt;&lt;a href=&quot;#生成-ast树&quot; class=&quot;headerlink&quot; title=&quot;生成 ast树&quot;&gt;&lt;/a&gt;生成 ast树&lt;/h4&gt;&lt;p&gt; 根据 assts的属性来提取出其中的 事件属性&lt;br&gt;
    
    </summary>
    
    
      <category term="Vue" scheme="https://chiangming.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://chiangming.github.io/tags/Vue/"/>
    
      <category term="源码解析" scheme="https://chiangming.github.io/tags/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
</feed>
